apply plugin: 'idea'

ext {
    generatedSrcDir = 'src/main/generated'
    generatedTestDir = 'src/test/generated'

    springVersion = '4.0.5.RELEASE'
    springDataJpaVersion = '1.6.0.RELEASE'
    querydslVersion = '3.3.4'
}

sourceSets {
    generated {
        java {
            srcDirs = [generatedSrcDir]
        }
    }

    generatedTest {
        java {
            srcDirs = [generatedTestDir]
        }
    }
}

configurations {
    lombok
    querydslapt
}

dependencies {

    lombok "org.projectlombok:lombok:1.12.6"
    compile "org.projectlombok:lombok:1.12.6"


    compile "org.hibernate:hibernate-entitymanager:4.3.5.Final"

    compile "org.springframework:spring-aspects:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"

    compile "org.springframework.data:spring-data-jpa:$springDataJpaVersion"

    // QueryDSL
    compile "com.mysema.querydsl:querydsl-jpa:$querydslVersion"
    compile("com.mysema.querydsl:querydsl-jpa-codegen:$querydslVersion") {
        exclude module: 'hibernate-jpa-2.0-api'
    }

    compile "org.squeryl:squeryl_2.10:0.9.5-6"
    compile "com.h2database:h2:1.4.178"
    compile "com.zaxxer:HikariCP:1.3.8"

    // Spring test
    testCompile "org.springframework:spring-test:$springVersion"

}

task delombok {
    ext.srcJava = 'src/main/java'
    ext.srcDelomboked = "${buildDir}/src-delomboked"

    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    doLast {
        // 보통은 configurations.runtime만으로 충분하지만, 가끔 provided 등의 사용자정의 configuration이
        // 존재 할 경우 classpath에 존재하지 않는 라이브러리라서 경고를 보여줄 수 있으므로
        // 모든 configurations의 의존성을 하나로 모아서 classpath로 지정한다.
        def allDependencies = configurations.lombok.asFileTree
        configurations.all { configuration -> allDependencies = allDependencies + configuration.asFileTree }

        ant.taskdef(name: 'delombok',
                classname: 'lombok.delombok.ant.DelombokTask',
                classpath: configurations.lombok.asPath)
        ant.delombok(from: srcJava,
                to: srcDelomboked,
                verbose: true,
                encoding: 'UTF-8',
                classpath: allDependencies.asPath)
    }
}

javadoc {
    dependsOn delombok
    source = fileTree(dir: delombok.srcDelomboked, includes: ['**/*.java', '**/*.html'])
    options.encoding = 'utf-8'
}

test {
    testLogging {
        // set options for log level LIFECYCLE
        events 'failed'
        exceptionFormat 'short'
        showStandardStreams true

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}

// QueryDSL code generation task
task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generate the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt + configurations.testCompile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

// QueryDSL test code generation task
task generateTestQueryDSL(type: JavaCompile, group: 'build', description: 'Generate the QueryDSL query types in Test') {
    source = sourceSets.test.java
    classpath = configurations.compile + configurations.testCompile + configurations.querydslapt + sourceSets.main.runtimeClasspath
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generatedTest.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

compileTestJava {
    dependsOn generateTestQueryDSL
    source generateTestQueryDSL.destinationDir
}

compileGeneratedTestJava {
    dependsOn generateTestQueryDSL
    options.warnings = false
    classpath += sourceSets.test.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
    delete sourceSets.generatedTest.java.srcDirs
}

idea {
    module {
        sourceDirs += file(generatedSrcDir)
    }

    module {
        testSourceDirs += file(generatedTestDir)
    }
}